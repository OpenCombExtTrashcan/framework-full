<?php
namespace jc\test\unit\testcase\jc\lang\compile\object;

use jc\lang\compile\object\StructDefine;
use jc\lang\compile\object\TokenPool;
use jc\lang\compile\object\DocCommentDeclare;
use jc\lang\compile\ClassCompileException;
use jc\lang\compile\object\NamespaceDeclare;
use jc\lang\compile\object\Token;
use jc\lang\compile\object\ClosureToken;

/**
 * Test class for StructDefine.
 * Generated by PHPUnit on 2011-08-18 at 15:13:51.
 */
class StructDefineTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var jc\lang\compile\object\StructDefine
     */
    protected $aStructDefine;

    protected $aStructKeywordToken;
    protected $aStructNameToken;
    protected $aStructBodyToken;
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    	$this->aStructKeywordToken = new Token(T_CLASS, 'class', 100) ;
    	$this->aStructNameToken = new Token(T_STRING, 'SameClassName', 110) ;
    	$this->aStructBodyToken = new ClosureToken(new Token(Token::T_BRACE_OPEN, '{', 120)) ;
    	$this->aStructBodyEndToken = new ClosureToken(new Token(Token::T_BRACE_CLOSE, '}', 120)) ;
    	$this->aStructBodyToken->setTheOther($this->aStructBodyEndToken) ;
    	    	
        $this->aStructDefine = new MockStructDefine(
        		$this->aStructKeywordToken
        		, $this->aStructNameToken
        		, $this->aStructBodyToken
        ) ;
        
    	$aTokenPool = new TokenPool() ;
    	$aTokenPool->add($this->aStructKeywordToken) ;
    	$aTokenPool->add($this->aStructDefine) ;
    	$aTokenPool->add($this->aStructNameToken) ;
    	$aTokenPool->add($this->aStructBodyToken) ;
    	$aTokenPool->add(new Token(T_STRING, 'hi world', 120)) ;
    	$aTokenPool->add(new Token(T_STRING, '~~~', 120)) ;
    	$aTokenPool->add($this->aStructBodyEndToken) ;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testName().
     */
    public function testName()
    {
        $this->assertEquals($this->aStructDefine->name(), 'SameClassName') ;
        
        $aOtherToken = new Token(T_STRING, 'OtherClassName', 110) ;
        $this->aStructDefine->setNameToken($aOtherToken) ;
        $this->assertEquals($this->aStructDefine->name(),'OtherClassName') ;
        
        // 设置 namespace
        $this->aStructDefine->setBelongsNamespace(
        	new MockNamespaceDeclareForThisTest('some\\package')
        ) ;
        $this->assertEquals($this->aStructDefine->name(),'OtherClassName') ;  // <<--- 还是 OtherClassName ， 不包括命名空间
    }

    /**
     * @todo Implement testNameToken().
     */
    public function testNameToken()
    {
        $this->assertEquals($this->aStructDefine->nameToken(), $this->aStructNameToken) ;
        
        $aOtherToken = new Token(T_STRING, 'OtherClassName', 110) ;
        $this->aStructDefine->setNameToken($aOtherToken) ;
        $this->assertEquals($this->aStructDefine->nameToken(),$aOtherToken) ;
    }

    /**
     * @see self::testNameToken()
     */
    public function testSetNameToken()
    {
    	$this->testNameToken() ;
    }

    /**
     * @todo Implement testBodyToken().
     */
    public function testBodyToken()
    {
        $this->assertTrue($this->aStructDefine->bodyToken()===$this->aStructBodyToken) ;
        
        $aOtherTokenA = new ClosureToken(new Token(Token::T_BRACE_OPEN, '{', 120)) ;
        $this->aStructDefine->setBodyToken($aOtherTokenA) ;
        $this->assertTrue($this->aStructDefine->bodyToken()===$aOtherTokenA) ;
        
        // 检查遇到异常
        foreach(array('}','[',']','(',')','<?','?>') as $sWrongToken)
        {
	        try{
		        $aOtherTokenB = new ClosureToken(new Token(Token::T_BRACE_OPEN, $sWrongToken, 120)) ;
		        $this->aStructDefine->setBodyToken($aOtherTokenB) ;
	        }
	        catch(ClassCompileException $e)
	        {}
	        $this->assertNotNull($e) ;
	        $this->assertTrue($e->causeToken()===$aOtherTokenB) ;
        }
        
        $this->assertTrue($this->aStructDefine->bodyToken()===$aOtherTokenA) ;			// 仍然是 $aOtherTokenA
    }

    /**
     * @see self::testBodyToken()
     */
    public function testSetBodyToken()
    {
    	$this->testBodyToken() ;
    }


    /**
     * @see self::testDocToken()
     */
    public function testSetDocToken()
    {
    	$this->testDocToken() ;
    }

    /**
     * @todo Implement testDocToken().
     */
    public function testDocToken()
    {
        $this->assertNull($this->aStructDefine->docToken()) ;
        
        $aDocToken = new Token(T_DOC_COMMENT, '/**..*/', 120) ;
        $aDocCommentDeclare = new DocCommentDeclare(($aDocToken)) ;
        $this->aStructDefine->setDocToken($aDocCommentDeclare) ;
        $this->assertTrue($this->aStructDefine->docToken()===$aDocCommentDeclare) ;
    }

    /**
     * @todo Implement testBodySource().
     */
    public function testBodySource()
    {
    	$this->assertEquals(
    	    	$this->aStructDefine->bodySource()
    	    	, "hi world~~~"
    	) ;
    }
}

class MockNamespaceDeclareForThisTest extends NamespaceDeclare
{
	public function __construct($sNamespaceName)
	{
		$this->sNamespaceName = $sNamespaceName ;
	}
	
	public function name()
	{
		return $this->sNamespaceName ;
	}
	
	public $sNamespaceName ;
}

class MockStructDefine extends StructDefine
{}

?>