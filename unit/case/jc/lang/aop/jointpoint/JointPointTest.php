<?php
namespace jc\test\unit\testcase\jc\lang\aop\jointpoint;

use jc\lang\aop\jointpoint\JointPoint ;

/**
 * Test class for JointPoint.
 * Generated by PHPUnit on 2011-08-16 at 11:07:24.
 */
class JointPointTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var JointPoint
     */
    protected $aJointPoint ;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {}

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {}

    /**
     * @todo Implement testCreateCallFunction().
     */
    public function testCreateCallFunction()
    {
    	
    	// 指定类方法
    	$aJointPoint = JointPoint::createCallFunction('MethodNameBBB','ClassNameAAA') ;
    	
    	$this->assertAttributeEquals(
    			JointPoint::transRegexp("ClassNameAAA::MethodNameBBB()")
    			, 'sExecutionRegexp',$aJointPoint
    	) ;

    	// 全局函数
    	$aJointPoint = JointPoint::createCallFunction('FunctionNameAAA') ;
    	
    	// 指定类的所有方法
    	$aJointPoint = JointPoint::createDefineMethod('ClassNameAAA','*') ;
    	
    	$this->assertAttributeEquals(
	    		JointPoint::transRegexp("::FunctionNameAAA()")
	    		, 'sExecutionRegexp',$aJointPoint
    	) ;
    	
    	// 指定类的所有方法
    	$aJointPoint = JointPoint::createCallFunction('*','ClassNameAAA') ;
    	
    	$this->assertAttributeEquals(
    			JointPoint::transRegexp("ClassNameAAA::*()")
    			, 'sExecutionRegexp',$aJointPoint
    	) ;
    }
    
    public function testCreateCallFunction()
    {
    	// 全局函数
    	$aJointPoint = JointPoint::createCallFunction('FunctionNameAAA','WeaveClassName') ;
    	
    	$this->assertAttributeEquals(
	    		JointPoint::transRegexp("FunctionNameAAA()")
	    		, 'sExecutionRegexp',$aJointPoint
    	) ;
    	
    	// 使用通配符
    	$aJointPoint = JointPoint::createCallFunction('FunctionName*','ClassName*') ;
    	
    	$this->assertAttributeEquals(
    			JointPoint::transRegexp("ClassName*::FunctionName*()")
    			, 'sExecutionRegexp',$aJointPoint
    	) ;
    	
    }

    /**
     * @todo Implement testCreateAccessProperty().
     */
    public function testCreateAccessProperty()
    {
    	// 向一个属性赋值(set)
    	$aJointPoint = JointPoint::createAccessProperty('ClassNameAAA','PropertyNameBBB',JointPoint::ACCESS_SET) ;
    	
    	$this->assertAttributeEquals(
    			JointPoint::transRegexp("ClassNameAAA::\$PropertyNameBBB set")
    			, 'sExecutionRegexp',$aJointPoint
    	) ;
    	
    	// 访问一个属性(get)
    	$aJointPoint = JointPoint::createAccessProperty('ClassNameAAA','PropertyNameBBB',JointPoint::ACCESS_GET) ;
    	
    	$this->assertAttributeEquals(
    			JointPoint::transRegexp("ClassNameAAA::\$PropertyNameBBB get")
    			, 'sExecutionRegexp',$aJointPoint
    	) ;
    	
    	// 赋值或访问(set/get)
    	$aJointPoint = JointPoint::createAccessProperty('ClassNameAAA','PropertyNameBBB',JointPoint::ACCESS_ANY) ;
    	
    	$this->assertAttributeEquals(
    			JointPoint::transRegexp("ClassNameAAA::\$PropertyNameBBB *")
    			, 'sExecutionRegexp',$aJointPoint
    	) ;
    	
    	// 使用通配符
    	$aJointPoint = JointPoint::createAccessProperty('ClassName*','PropertyName*') ;
    	
    	$this->assertAttributeEquals(
    			JointPoint::transRegexp("ClassName*::\$PropertyName* *")
    			, 'sExecutionRegexp',$aJointPoint
    	) ;
    	
    	// 指定class的所有属性
    	$aJointPoint = JointPoint::createAccessProperty('ClassNameAAA') ;
    	
    	$this->assertAttributeEquals(
    			JointPoint::transRegexp("ClassNameAAA::\$* *")
    			, 'sExecutionRegexp',$aJointPoint
    	) ;
    	
    	// 错误的 $sAccess
		$this->setExpectedException('jc\\lang\\Exception');
		$aJointPoint = JointPoint::createAccessProperty('ClassNameAAA','PropertyNameBBB','setter') ;
    }

    /**
     * @todo Implement testCreateThrowException().
     */
    public function testCreateThrowException()
    {
    	// 指定异常类
    	$aJointPoint = JointPoint::createThrowException('ExceptionClassNameAAA') ;
    	
    	$this->assertAttributeEquals(
    			JointPoint::transRegexp("throw ExceptionClassNameAAA")
    			, 'sExecutionRegexp',$aJointPoint
    	) ;
    	
    	// 任意异常类
    	$aJointPoint = JointPoint::createThrowException() ;
    	
    	$this->assertAttributeEquals(
    			JointPoint::transRegexp("throw *")
    			, 'sExecutionRegexp',$aJointPoint
    	) ;
    	
    	// 使用通配符
    	$aJointPoint = JointPoint::createThrowException('ExceptionClassName*') ;
    	
    	$this->assertAttributeEquals(
    			JointPoint::transRegexp("throw ExceptionClassName*")
    			, 'sExecutionRegexp',$aJointPoint
    	) ;
    }

    /**
     * @todo Implement testCreateNewObject().
     */
    public function testCreateNewObject()
    {
    	// 指定类
    	$aJointPoint = JointPoint::createNewObject('ClassNameAAA') ;
    	
    	$this->assertAttributeEquals(
    			JointPoint::transRegexp("new ClassNameAAA")
    			, 'sExecutionRegexp',$aJointPoint
    	) ;
    	
    	// 任意类
    	$aJointPoint = JointPoint::createNewObject() ;
    	
    	$this->assertAttributeEquals(
    			JointPoint::transRegexp("new *")
    			, 'sExecutionRegexp',$aJointPoint
    	) ;
    	
    	// 使用通配符
    	$aJointPoint = JointPoint::createNewObject('ClassName*') ;
    	
    	$this->assertAttributeEquals(
    			JointPoint::transRegexp("new ClassName*")
    			, 'sExecutionRegexp',$aJointPoint
    	) ;
    }

    /**
     * @todo Implement testSetExecutionPattern().
     */
    public function testSetExecutionPattern()
    {
    	$aJointPoint = new JointPoint() ;
    	
    	// 完整类名
    	$aJointPoint->setExecutionPattern("new ClassName") ;
    	$this->assertAttributeEquals(
    			JointPoint::transRegexp("new ClassName")
    			, 'sExecutionRegexp',$aJointPoint
    	) ;
    	
    	// 使用通配符
    	$aJointPoint->setExecutionPattern("throw jc\\lang\\Exception*") ;
    	$this->assertAttributeEquals(
    			JointPoint::transRegexp("throw jc\\lang\\Exception*")
    			, 'sExecutionRegexp',$aJointPoint
    	) ;
    	
    	// 使用$
    	$aJointPoint->setExecutionPattern("some\\one\\package\\ClassAAA::\$PropertyAAA *") ;
    	$this->assertAttributeEquals(
    			JointPoint::transRegexp("some\\one\\package\\ClassAAA::\$PropertyAAA *")
    			, 'sExecutionRegexp',$aJointPoint
    	) ;
    }

    /**
     * @todo Implement testSetExecutionRegexp().
     */
    public function testSetExecutionRegexp()
    {
    	$aJointPoint = new JointPoint() ;
    	
    	// 完整类名
    	$aJointPoint->setExecutionRegexp("`new ClassAAA`is") ;
    	$this->assertAttributeEquals("`new ClassAAA`is", 'sExecutionRegexp',$aJointPoint) ;
    }

    /**
     * @todo Implement testExecutionRegexp().
     */
    public function testExecutionRegexp()
    {
    	$aJointPoint = new JointPoint() ;
    	
    	// 完整类名
    	$aJointPoint->setExecutionRegexp("`new ClassAAA`is") ;
    	$this->assertEquals("`new ClassAAA`is", $aJointPoint->executionRegexp()) ;
    }

    /**
     * @todo Implement testSetCallTrac().
     */
    public function testSetCallTrac()
    {
    	$aJointPoint = new JointPoint() ;
    	
    	// 调用路径：
    	// 	some\one\package\ClassNameAAA::FuncNameAAA()
    	// 	...
    	// 	some\one\package\ClassNameBBB::FuncNameBBB()
    	$aJointPoint->setCallTrac("some\\one\\package\\ClassNameAAA::FuncNameAAA();*;some\\one\\package\\ClassNameBBB::FuncNameBBB()*") ;
    	
    	$this->assertAttributeEquals(
    			JointPoint::transRegexp("some\\one\\package\\ClassNameAAA::FuncNameAAA();*;some\\one\\package\\ClassNameBBB::FuncNameBBB()*")
    			, 'sCallTracRegexp',$aJointPoint
    	) ;
    }

    /**
     * @todo Implement testCallTracRegexp().
     */
    public function testCallTracRegexp()
    {
    	$aJointPoint = new JointPoint() ;
    	
    	// 调用路径：
    	// 	some\one\package\ClassNameAAA::FuncNameAAA()
    	// 	...
    	// 	some\one\package\ClassNameBBB::FuncNameBBB()
    	$aJointPoint->setCallTrac("some\\one\\package\\ClassNameAAA::FuncNameAAA();*;some\\one\\package\\ClassNameBBB::FuncNameBBB()*") ;
    	
    	$this->assertEquals(
    			JointPoint::transRegexp("some\\one\\package\\ClassNameAAA::FuncNameAAA();*;some\\one\\package\\ClassNameBBB::FuncNameBBB()*")
    			, $aJointPoint->callTracRegexp()
    	) ;
    }

    /**
     * @todo Implement testTransRegexp().
     */
    public function testTransRegexp()
    {
        $this->assertEquals(
        	JointPoint::transRegexp("ClassName*::FuncName*()")
        	, "`ClassName.*\:\:FuncName.*\(\)`is"
        ) ;
        
        $this->assertEquals(
        	JointPoint::transRegexp("ClassNameAAA::FuncNameAAA()")
        	, "`ClassNameAAA\:\:FuncNameAAA\(\)`is"
        ) ;
        
        $this->assertEquals(
        	JointPoint::transRegexp("ClassNameAAA::\$PropertyNameAAA *")
        	, "`ClassNameAAA\:\:\\\$PropertyNameAAA .*`is"
        ) ;
        
        // 测试正则效果
        $this->assertRegExp(
        	JointPoint::transRegexp("ClassNameAAA::\$PropertyNameAAA *")
        	, "ClassNameAAA::\$PropertyNameAAA set"
        ) ;
        $this->assertRegExp(
        	JointPoint::transRegexp("ClassName*::FuncName*()")
        	, "ClassNameAAA::FuncNameAAA()"
        ) ;
    }
}

?>