<?php
namespace jc\test\unit\testcase\jc\lang\aop;

use jc\lang\Exception;
use jc\lang\compile\CompilerFactory;
use jc\system\Application ;
use jc\lang\compile\object\FunctionDefine;
use jc\lang\aop\Pointcut ;
use jc\pattern\composite\IContainer;

/**
 * Test class for Pointcut.
 * Generated by PHPUnit on 2011-08-17 at 16:46:45.
 */
class PointcutTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Pointcut
     */
    protected $aPointcut ;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->aPointcut = new Pointcut('OooXxx');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testJointPoints().
     */
    public function testJointPoints()
    {
        $this->assertTrue( $this->aPointcut->jointPoints() instanceof IContainer ) ;
    }

    /**
     * @todo Implement testAdvices().
     */
    public function testAdvices()
    {
        $this->assertTrue( $this->aPointcut->advices() instanceof IContainer ) ;
    }
    
    /**
     * @todo Implement testCreateFromToken().
     */
    public function testCreateFromToken()
    {
    	$sAspectNameA = 'jc\\test\\unit\\testcase\\jc\\lang\\aop\\mockup\\MockupAspectA' ;
    	$sAspectNameB = 'jc\\test\\unit\\testcase\\jc\\lang\\aop\\mockup\\MockupAspectB' ;
    	
		$aAspectFileA = Application::singleton()->classLoader()->searchClass($sAspectNameA) ;
		$aAspectFileB = Application::singleton()->classLoader()->searchClass($sAspectNameB) ;
		
		$aClassCompiler = CompilerFactory::singleton()->create() ;
		$aTokenPoolForAspectA = $aClassCompiler->interpret( $aAspectFileA->openReader() ) ;
		$aTokenPoolForAspectB = $aClassCompiler->interpret( $aAspectFileB->openReader() ) ;
		
		// 做为普通方法定义的,不需要参数的 pointcut，且 aspect 的构造函数 需要可省的参数
		$aPointcut = Pointcut::createFromToken($aTokenPoolForAspectA->findFunction('someWorks',$sAspectNameA)) ;
		$this->assertInstanceOf('jc\\lang\\aop\\Pointcut',$aPointcut) ;
		
		// 做为普通方法定义的,需要可省参数的 pointcut，但 aspect 的构造函数 需要可省的参数
		$aPointcut = Pointcut::createFromToken($aTokenPoolForAspectA->findFunction('otherWorks',$sAspectNameA)) ;
		$this->assertInstanceOf('jc\\lang\\aop\\Pointcut',$aPointcut) ;
		
		// 做为普通方法定义的,且声明为 private
		$aPointcut = Pointcut::createFromToken($aTokenPoolForAspectA->findFunction('otherWorksA',$sAspectNameA)) ;
		$this->assertInstanceOf('jc\\lang\\aop\\Pointcut',$aPointcut) ;
		
		// 做为普通方法定义的 pointcut，但 aspect 的构造函数 需要 非可省的参数
		try{
			$aPointcut = null ;
			$aPointcut = Pointcut::createFromToken($aTokenPoolForAspectB->findFunction('someWorks',$sAspectNameB)) ;
			$this->assertTrue(false,"没有触发预期的异常") ;
		}
		catch (Exception $e)
		{}
		$this->assertNull($aPointcut) ;
		
		// 做为静态方法定义的 pointcut
		$aPointcut = Pointcut::createFromToken($aTokenPoolForAspectA->findFunction('otherWorksA',$sAspectNameA)) ;
		$this->assertInstanceOf('jc\\lang\\aop\\Pointcut',$aPointcut) ;

		// 做为静态方法定义的 pointcut，即使 aspect 的构造函数 需要非可省参数
		$aPointcut = Pointcut::createFromToken($aTokenPoolForAspectB->findFunction('otherWorksC',$sAspectNameB)) ;
		$this->assertInstanceOf('jc\\lang\\aop\\Pointcut',$aPointcut) ;
		
		// 做为静态方法定义的 pointcut，但是声明为 private
		try{
			$aPointcut = null ;
			$aPointcut = Pointcut::createFromToken($aTokenPoolForAspectB->findFunction('otherWorksB',$sAspectNameB)) ;
			$this->assertTrue(false,"没有触发预期的异常") ;
		}
		catch (Exception $e)
		{}
		
		// 测试jointpoint //////////
		$aPointcut = Pointcut::createFromToken($aTokenPoolForAspectA->findFunction('someWorks',$sAspectNameA)) ;
		$aIterator = $aPointcut->jointPoints()->iterator() ;
		
		$this->assertInstanceOf('jc\\lang\\aop\\JointPoint',$aIterator->current()) ;
		$aIterator->next() ;
		$this->assertInstanceOf('jc\\lang\\aop\\JointPoint',$aIterator->current()) ;
		$aIterator->next() ;
		$this->assertInstanceOf('jc\\lang\\aop\\JointPoint',$aIterator->current()) ;
		$aIterator->next() ;
		$this->assertInstanceOf('jc\\lang\\aop\\JointPoint',$aIterator->current()) ;
		$aIterator->next() ;
    }
    
}
?>
