<?php
namespace jc\test\unit\testcase\jc\lang\compile\object;

use jc\lang\compile\object\TokenPool ;
use jc\lang\compile\object\FunctionDefine;
use jc\lang\compile\object\ClassDefine;

/**
 * Test class for TokenPool.
 * Generated by PHPUnit on 2011-08-19 at 14:27:37.
 */
class TokenPoolTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var jc\lang\compile\object\TokenPool
     */
    protected $aTokenPool;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->aTokenPool = new TokenPool;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @see testFindClass()
     */
    public function testAddClass()
    {
    	$this->testFindClass() ;
    }

    /**
     * @todo Implement testFindClass().
     */
    public function testFindClass()
    {
    	//
    	$aClassA = new MockClassDefine('SomeClassA') ;
    	$this->aTokenPool->addClass($aClassA) ;
    	//
    	$aClassB = new MockClassDefine('SomeClassB') ;
    	$this->aTokenPool->addClass($aClassB) ;
    	//
    	$aClassC = new MockClassDefine('Some\\Class\\NameC') ;
    	$this->aTokenPool->addClass($aClassC) ;
    	
    	$this->assertEquals($aClassA,$this->aTokenPool->findClass("SomeClassA")) ;
    	$this->assertEquals($aClassB,$this->aTokenPool->findClass("SomeClassB")) ;
    	$this->assertEquals($aClassC,$this->aTokenPool->findClass("Some\\Class\\NameC")) ;
    }

    /**
     * @see self::testFindFunction()
     */
    public function testAddFunction()
    {
        $this->testFindFunction() ;
    }

    /**
     * @todo Implement testFindFunction().
     */
    public function testFindFunction()
    {
    	//
    	$aFuncA = new MockFunctionDefine('SomeFunctionA') ;
    	$this->aTokenPool->addFunction($aFuncA) ;
    	//
    	$aFuncB = new MockFunctionDefine('SomeFunctionB') ;
    	$this->aTokenPool->addFunction($aFuncB) ;
    	//
    	$aMethodA = new MockFunctionDefine('MethodA','NameA') ;
    	$this->aTokenPool->addFunction($aMethodA) ;
    	//
    	$aMethodB = new MockFunctionDefine('MethodB','Some\\Class\\NameB') ;
    	$this->aTokenPool->addFunction($aMethodB) ;
    	//
    	$aMethodC = new MockFunctionDefine('MethodC','Some\\Class\\NameB') ;
    	$this->aTokenPool->addFunction($aMethodC) ;
    	
    	$this->assertEquals($aFuncA,$this->aTokenPool->findFunction("SomeFunctionA")) ;
    	$this->assertEquals($aFuncB,$this->aTokenPool->findFunction("SomeFunctionB")) ;
    	$this->assertEquals($aMethodA,$this->aTokenPool->findFunction("MethodA",'NameA')) ;
    	$this->assertEquals($aMethodB,$this->aTokenPool->findFunction('MethodB','Some\\Class\\NameB')) ;
    	$this->assertEquals($aMethodC,$this->aTokenPool->findFunction('MethodC','Some\\Class\\NameB')) ;
    }
}

class MockClassDefine extends ClassDefine
{
	public function __construct($sClassName)
	{
		$this->sClassName = $sClassName ;
	}
	
	public function fullName()
	{
		return $this->sClassName ;
	}
	
	public $sClassName ;
}
class MockFunctionDefine extends FunctionDefine
{
	public function __construct($sFuncName,$sClassName=null)
	{
		$this->sFuncName = $sFuncName ;
		
		if($sClassName)
		{
			$this->aBelongsClass = new MockClassDefine($sClassName) ;
		}
		//$this->sClassName = $sClassName ;
	}
	
	public function name()
	{
		return $this->sFuncName ;
	}
	
	public function belongsClass()
	{
		return $this->aBelongsClass ;
	}
	
	public $sFuncName ;
	public $aBelongsClass ;
} 


?>
