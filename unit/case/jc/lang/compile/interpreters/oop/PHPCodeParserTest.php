<?php
namespace jc\test\unit\testcase\jc\lang\compile\interpreters\oop;

use jc\lang\compile\interpreters\oop\PHPCodeParser ;
use jc\lang\compile\object\Token;
use jc\lang\compile\object\TokenPool;
use jc\lang\compile\interpreters\oop\State;

/**
 * Test class for PHPCodeParser.
 * Generated by PHPUnit on 2011-08-18 at 14:13:19.
 */
class PHPCodeParserTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var jc\lang\compile\interpreters\oop\PHPCodeParser
     */
    protected $aPHPCodeParser;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->aPHPCodeParser = new PHPCodeParser;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testParse().
     */
    public function testParse()
    {
    	$aState = new State() ;
    	$aTokenPool = new TokenPool() ;
    	
    	// 添加一些mock token数据
    	$aTokenPool->add(new MockAnyTypeToken()) ;
    	$aTokenPool->add(new MockAnyTypeToken()) ;
    	$aTokenPool->add(new MockAnyTypeToken()) ;
    	$aTokenPool->add(new Token(T_OPEN_TAG,'<?',4)) ;		// <<--- php开始标签
    	$aTokenPool->add(new MockAnyTypeToken()) ;
    	$aTokenPool->add(new MockAnyTypeToken()) ;
    	$aTokenPool->add(new MockAnyTypeToken()) ;
    	$aTokenPool->add(new MockAnyTypeToken()) ;
    	$aTokenPool->add(new MockAnyTypeToken()) ;
    	$aTokenPool->add(new Token(T_CLOSE_TAG,'?>',11)) ;		// <<--- php结束标签
    	$aTokenPool->add(new MockAnyTypeToken()) ;
    	$aTokenPool->add(new MockAnyTypeToken()) ;
    	
    	$aIterator = $aTokenPool->iterator() ;
    	
    	$aIterator->rewind() ;
    	$this->aPHPCodeParser->parse($aTokenPool, $aIterator, $aState) ;
    	$this->assertFalse($aState->isPHPCode()) ;
    	
    	$aIterator->next() ;
    	$this->aPHPCodeParser->parse($aTokenPool, $aIterator, $aState) ;
    	$this->assertFalse($aState->isPHPCode()) ;
    	
    	$aIterator->next() ;
    	$this->aPHPCodeParser->parse($aTokenPool, $aIterator, $aState) ;
    	$this->assertFalse($aState->isPHPCode()) ;
    	
    	$aIterator->next() ;
    	$this->aPHPCodeParser->parse($aTokenPool, $aIterator, $aState) ;
    	$this->assertTrue($aState->isPHPCode()) ;		// <<--- 遇到 php开始标签
    	
    	// 连续5个token
    	// $aState->isPHPCode() return true --------------
    	for($i=0;$i<5;$i++)
    	{
	    	$aIterator->next() ;
	    	$this->aPHPCodeParser->parse($aTokenPool, $aIterator, $aState) ;
	    	$this->assertTrue($aState->isPHPCode()) ;
    	}
    	
    	$aIterator->next() ;
    	$this->aPHPCodeParser->parse($aTokenPool, $aIterator, $aState) ;
    	$this->assertFalse($aState->isPHPCode()) ;		// <<--- 遇到 php结束标签
    
    	// $aState->isPHPCode() return false --------------
    	for($i=0;$i<2;$i++)
    	{
	    	$aIterator->next() ;
	    	$this->aPHPCodeParser->parse($aTokenPool, $aIterator, $aState) ;
	    	$this->assertFalse($aState->isPHPCode()) ;
    	}
    }
}
?>
