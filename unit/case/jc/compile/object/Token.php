<?php
namespace jc\test\unit\testcase\jc\compile\object;

use jc\compile\object\TokenPool;

use jc\compile\object\Token as JcToken ;

/**
 * Test class for Token.
 * Generated by PHPUnit on 2011-08-19 at 18:25:58.
 */
class Token extends \PHPUnit_Framework_TestCase
{
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @see self::testTokenType()
     */
    public function testSetTokenType()
    {
        $this->testTokenType() ;
    }

    /**
     * @todo Implement testTokenType().
     */
    public function testTokenType()
    {
        $aToken = new JcToken(T_STRING,'ooxx',100) ;
        $this->assertEquals($aToken->tokenType(), T_STRING) ;
        
        $aToken->setTokenType(T_SWITCH) ;
        $this->assertEquals($aToken->tokenType(), T_SWITCH) ;
        
        // 特殊的类型
        $aToken = new JcToken(T_STRING,'{',100) ;
        $this->assertEquals($aToken->tokenType(), JcToken::T_BRACE_OPEN) ;
        $this->assertEquals($aToken->tokenType(true), T_STRING) ;
        
        $aToken = new JcToken(T_STRING,'}',100) ;
        $this->assertEquals($aToken->tokenType(), JcToken::T_BRACE_CLOSE) ;
        $this->assertEquals($aToken->tokenType(true), T_STRING) ;
        
        $aToken = new JcToken(T_STRING,'[',100) ;
        $this->assertEquals($aToken->tokenType(), JcToken::T_BRACE_SQUARE_OPEN) ;
        $this->assertEquals($aToken->tokenType(true), T_STRING) ;
        
        $aToken = new JcToken(T_STRING,']',100) ;
        $this->assertEquals($aToken->tokenType(), JcToken::T_BRACE_SQUARE_CLOSE) ;
        $this->assertEquals($aToken->tokenType(true), T_STRING) ;
        
        $aToken = new JcToken(T_STRING,'(',100) ;
        $this->assertEquals($aToken->tokenType(), JcToken::T_BRACE_ROUND_OPEN) ;
        $this->assertEquals($aToken->tokenType(true), T_STRING) ;
        
        $aToken = new JcToken(T_STRING,')',100) ;
        $this->assertEquals($aToken->tokenType(), JcToken::T_BRACE_ROUND_CLOSE) ;
        $this->assertEquals($aToken->tokenType(true), T_STRING) ;
        
        $aToken = new JcToken(T_STRING,';',100) ;
        $this->assertEquals($aToken->tokenType(), JcToken::T_SEMICOLON) ;
        $this->assertEquals($aToken->tokenType(true), T_STRING) ;
        
    }

    /**
     * @todo Implement testTokenTypeName().
     */
    public function testTokenTypeName()
    {
        $this->assertEquals(
        	'T_STRING', JcToken::createInstance(array(T_STRING,'ooxx',100))->tokenTypeName()
        ) ;
        
        $this->assertEquals(
        	'T_SWITCH', JcToken::createInstance(array(T_SWITCH,'switch',100))->tokenTypeName()
        ) ;
        
        $this->assertEquals(
        	'T_ARRAY', JcToken::createInstance(array(T_ARRAY,'array',100))->tokenTypeName()
        ) ;
        
        $this->assertEquals(
        	'T_AS', JcToken::createInstance(array(T_AS,'as',100))->tokenTypeName()
        ) ;
        
        // ...
        
        // 特殊的类型
        $this->assertEquals(
        	'Token::T_BRACE_SQUARE_CLOSE', JcToken::createInstance(array(JcToken::T_BRACE_SQUARE_CLOSE,']',100))->tokenTypeName()
        ) ;
        $this->assertEquals(
        	'Token::T_BRACE_ROUND_OPEN', JcToken::createInstance(array(JcToken::T_BRACE_ROUND_OPEN,'(',100))->tokenTypeName()
        ) ;
        $this->assertEquals(
        	'Token::T_SEMICOLON', JcToken::createInstance(array(JcToken::T_SEMICOLON,';',100))->tokenTypeName()
        ) ;
    }

    /**
     * @todo Implement testObjectPool().
     */
    public function testObjectPool()
    {
    	$aTokenPool = new TokenPool() ;
    	$aToken = new JcToken(JcToken::T_BRACE_SQUARE_CLOSE,']',100) ;
    	
    	$aTokenPool->add($aToken,null,true) ;
    	$this->assertTrue($aTokenPool===$aToken->objectPool()) ;
    }

    /**
     * @see self::testBelongsNamespace()
     */
    public function testSetBelongsNamespace()
    {
        $this->testBelongsNamespace() ;
    }

    /**
     * @todo Implement testBelongsNamespace().
     */
    public function testBelongsNamespace()
    {
    	$aTokenPool = new TokenPool() ;
    	$this->assertTrue($aTokenPool===$aToken->objectPool()) ;
    	
    	$aTokenPool->add($aToken,null,true) ;
    	$this->assertTrue($aTokenPool===$aToken->objectPool()) ;
    }

    /**
     * @todo Implement testSetBelongsClass().
     */
    public function testSetBelongsClass()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testBelongsClass().
     */
    public function testBelongsClass()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetBelongsFunction().
     */
    public function testSetBelongsFunction()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testBelongsFunction().
     */
    public function testBelongsFunction()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testBelongsSignature().
     */
    public function testBelongsSignature()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
?>
