<?php
namespace jc\test\unit\testcase\jc\compile\object;

use jc\compile\ClassCompileException;

use jc\compile\object\NamespaceDeclare;
use jc\compile\object\Token;
use jc\compile\object\ClosureToken;

/**
 * Test class for ClassDefine.
 * Generated by PHPUnit on 2011-08-18 at 15:13:51.
 */
class ClassDefine extends \PHPUnit_Framework_TestCase
{
    /**
     * @var jc\compile\object\ClassDefine
     */
    protected $aClassDefine;

    protected $aClassKeywordToken;
    protected $aClassNameToken;
    protected $aClassBodyToken;
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    	$this->aClassKeywordToken = new Token(T_CLASS, 'class', 100) ;
    	$this->aClassNameToken = new Token(T_STRING, 'SameClassName', 110) ;
    	$this->aClassBodyToken = new ClosureToken(new Token(Token::T_BRACE_OPEN, '{', 120)) ;
    	
        $this->aClassDefine = new \jc\compile\object\ClassDefine(
        		$this->aClassKeywordToken
        		, $this->aClassNameToken
        		, $this->aClassBodyToken
        ) ;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testFullName().
     */
    public function testFullName()
    {
        $this->assertEquals($this->aClassDefine->fullName(), 'SameClassName') ;
        
        $aOtherToken = new Token(T_STRING, 'OtherClassName', 110) ;
        $this->aClassDefine->setNameToken($aOtherToken) ;
        $this->assertEquals($this->aClassDefine->fullName(),'OtherClassName') ;
        
        // 设置 namespace
        $this->aClassDefine->setBelongsNamespace(
        	new MockNamespaceDeclareForThisTest('some\\package')
        ) ;
        $this->assertEquals($this->aClassDefine->fullName(),'some\\package\\OtherClassName') ;
    }
}

class MockNamespaceDeclareForThisTest extends NamespaceDeclare
{
	public function __construct($sNamespaceName)
	{
		$this->sNamespaceName = $sNamespaceName ;
	}
	
	public function name()
	{
		return $this->sNamespaceName ;
	}
	
	public $sNamespaceName ;
}

?>