<?php
namespace jc\test\unit\testcase\jc\compile\object;

use jc\compile\ClassCompileException;
use jc\compile\object\Token;
use jc\compile\object\ClosureToken ;

/**
 * Test class for ClosureToken.
 * Generated by PHPUnit on 2011-08-18 at 15:14:02.
 */
class ClosureTokenTest extends \PHPUnit_Framework_TestCase
{    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {}

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {}

    /**
     * @todo Implement testIsOpen().
     */
    public function testConstruct()
    {
    	// 合法的符号
    	foreach(
    		array_merge(
    			ClosureToken::openClosureTokens()
    			, ClosureToken::closeClosureTokens())
    		as $sSymbol=>$tokenType
    	)
    	{
    		$aClosureToken = new ClosureToken( new Token($tokenType,$sSymbol,100) ) ;
    	}

    	// 一些非法的符号
    	$aClosureToken = '<null>' ;
    	foreach( array(T_ABSTRACT=>'abstract',T_AS=>'as',T_ARRAY=>'array',T_STRING=>'ooxx') as $tokenType=>$sSymbol )
    	{
	    	try{
	    		$aClosureToken = new ClosureToken( new Token($tokenType,$sSymbol,100) ) ;
	    	}
	    	catch(ClassCompileException $e)
	    	{}
	    	$this->assertNotNull($e) ;
	    	$this->assertEquals($aClosureToken, '<null>') ;
    	}
    }
    
    /**
     * @todo Implement testIsOpen().
     */
    public function testIsOpen()
    {
    	// open符号
    	foreach( ClosureToken::openClosureTokens() as $sSymbol=>$tokenType )
    	{
    		$aClosureToken = new ClosureToken( new Token($tokenType,$sSymbol,100) ) ;
    		$this->assertTrue($aClosureToken->isOpen()) ;
    	}
    	
    	// close符号
    	foreach( ClosureToken::closeClosureTokens() as $sSymbol=>$tokenType )
    	{
    		$aClosureToken = new ClosureToken( new Token($tokenType,$sSymbol,100) ) ;
    		$this->assertFalse($aClosureToken->isOpen()) ;
    	}
    }

    /**
     * @todo Implement testTheOther().
     */
    public function testTheOther()
    {
		foreach( ClosureToken::closureTokenPairs() as $openToken=>$closeToken )
		{
	    	$aOpenToken = new ClosureToken( new Token($openToken,'',100) ) ;
	    	$aCloseToken = new ClosureToken( new Token($closeToken,'',100) ) ;
	    	
	    	$aOpenToken->setTheOther($aCloseToken) ;
	    	
	    	$this->assertTrue($aOpenToken->theOther()===$aCloseToken) ;
	    	$this->assertTrue($aCloseToken->theOther()===$aOpenToken) ;
		}
    }

    /**
     * @see self::testTheOther()
     */
    public function testSetTheOther()
    {
        $this->testTheOther() ;
    }
}
?>
