<?php
namespace jc\test\unit\testcase\jc\compile\interpreters\oop;

use jc\compile\interpreters\oop\State ;

/**
 * Test class for State.
 * Generated by PHPUnit on 2011-08-18 at 10:42:13.
 */
class StateTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var jc\compile\interpreters\oop\State
     */
    protected $aState;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->aState = new State;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testIsPHPCode()
    {
    	// false
    	$this->assertFalse($this->aState->isPHPCode()) ;
    	
    	// 设置一个状态
    	$this->aState->setPHPCode(true) ;
    	$this->assertTrue($this->aState->isPHPCode()) ;
    	
    	$this->aState->setPHPCode(1) ;
    	$this->assertTrue($this->aState->isPHPCode()) ;
    	
    	$this->aState->setPHPCode('some string') ;
    	$this->assertTrue($this->aState->isPHPCode()) ;
    	
    	$this->aState->setPHPCode('false') ;	// <<-- is true
    	$this->assertTrue($this->aState->isPHPCode()) ;
    	
    	$this->aState->setPHPCode(false) ;
    	$this->assertFalse($this->aState->isPHPCode()) ;
    	
    	$this->aState->setPHPCode(0) ;
    	$this->assertFalse($this->aState->isPHPCode()) ;
    	
    	$this->aState->setPHPCode('0') ;
    	$this->assertFalse($this->aState->isPHPCode()) ;
    	
    	$this->aState->setPHPCode('') ;
    	$this->assertFalse($this->aState->isPHPCode()) ;
    	
    	$this->aState->setPHPCode(null) ;
    	$this->assertFalse($this->aState->isPHPCode()) ;
    }

    /**
     * @see self::testIsPHPCode()
     */
    public function testSetPHPCode()
    {
    	$this->testIsPHPCode() ;
    }

    /**
     * @todo Implement testCurrentNamespace().
     */
    public function testCurrentNamespace()
    {
    	// null
    	$this->assertNull($this->aState->currentNamespace()) ;
    	
    	// 设置一个 NamespaceDeclare
    	$aNamespaceDeclare = new MockNamespaceDeclare() ;
    	$this->aState->setCurrentNamespace( $aNamespaceDeclare ) ;
    	
    	$this->assertEquals($aNamespaceDeclare, $this->aState->currentNamespace()) ;
    }

    /**
     * @todo Implement testSetCurrentNamespace().
     */
    public function testSetCurrentNamespace()
    {
    	// 设置一个 NamespaceDeclare
    	$aNamespaceDeclare = new MockNamespaceDeclare() ;
    	$this->aState->setCurrentNamespace( $aNamespaceDeclare ) ;
    	
    	$this->assertEquals($aNamespaceDeclare, $this->aState->currentNamespace()) ;
    }

    /**
     * @todo Implement testCurrentClass().
     */
    public function testCurrentClass()
    {
    	// null
    	$this->assertNull($this->aState->currentClass()) ;
    	
    	// 设置一个 ClassDefine
    	$aClassDefine = new MockClassDefine() ;
    	$this->aState->setCurrentClass( $aClassDefine ) ;
    	
    	$this->assertEquals($aClassDefine, $this->aState->currentClass()) ;
    }

    /**
     * @todo Implement testSetCurrentClass().
     */
    public function testSetCurrentClass()
    {
    	// 设置一个 ClassDefine
    	$aClassDefine = new MockClassDefine() ;
    	$this->aState->setCurrentClass( $aClassDefine ) ;
    	
    	$this->assertEquals($aClassDefine, $this->aState->currentClass()) ;
    }

    /**
     * @todo Implement testCurrentFunction().
     */
    public function testCurrentFunction()
    {
    	// null
    	$this->assertNull($this->aState->currentFunction()) ;
    	
    	// 设置一个 FunctionDefine
    	$aFunctionDefine = new MockFunctionDefine() ;
    	$this->aState->setCurrentFunction( $aFunctionDefine ) ;
    	
    	$this->assertEquals($aFunctionDefine, $this->aState->currentFunction()) ;
    }

    /**
     * @todo Implement testSetCurrentFunction().
     */
    public function testSetCurrentFunction()
    {
    	// 设置一个 FunctionDefine
    	$aFunctionDefine = new MockFunctionDefine() ;
    	$this->aState->setCurrentFunction( $aFunctionDefine ) ;
    	
    	$this->assertEquals($aFunctionDefine, $this->aState->currentFunction()) ;
    }
}



use jc\compile\object\NamespaceDeclare;
use jc\compile\object\ClassDefine;
use jc\compile\object\FunctionDefine;

class MockNamespaceDeclare extends NamespaceDeclare
{
	public function __construct() {}
}
class MockClassDefine extends ClassDefine
{
	public function __construct() {}
}
class MockFunctionDefine extends FunctionDefine
{
	public function __construct() {}
}
?>